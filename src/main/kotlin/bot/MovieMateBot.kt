package org.example.bot

import com.github.kotlintelegrambot.Bot
import com.github.kotlintelegrambot.bot
import com.github.kotlintelegrambot.dispatch
import com.github.kotlintelegrambot.dispatcher.callbackQuery
import com.github.kotlintelegrambot.dispatcher.command
import com.github.kotlintelegrambot.dispatcher.text
import com.github.kotlintelegrambot.entities.ChatId
import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import com.github.kotlintelegrambot.entities.ParseMode
import com.github.kotlintelegrambot.entities.TelegramFile
import com.github.kotlintelegrambot.entities.TelegramFile.ByFileId
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import com.github.kotlintelegrambot.logging.LogLevel
import jakarta.annotation.PostConstruct
import org.example.api.KpService
import org.example.api.TmdbService
import org.example.entity.FavoriteGenre
import org.example.entity.FavoriteMovie
import org.example.entity.User
import org.example.repository.FavoriteMovieRepository
import org.example.repository.RequestHistoryRepository
import org.example.repository.UserRepository
import org.springframework.beans.factory.annotation.Value
import org.springframework.stereotype.Component

@Component
class MovieMateBot(
    private val userRepository: UserRepository,
    private val favoriteMovieRepository: FavoriteMovieRepository,
    private val requestHistoryRepository: RequestHistoryRepository,
    private val tmdbService: TmdbService,
    private val kpService: KpService,
    @Value("\${telegram.bot.token}") private val botToken: String
) {

    private lateinit var bot: Bot

    private val waitingForMovieName = mutableSetOf<Long>()

    @PostConstruct
    fun start() {
        bot = bot {
            token = botToken
            logLevel = LogLevel.Error

            dispatch {

                command("start") {
                    val chatId = message.chat.id
                    val telegramUser = message.from!!

                    userRepository.findByTelegramId(telegramUser.id)
                        ?: userRepository.save(
                            User(
                                telegramId = telegramUser.id,
                                username = telegramUser.username,
                                firstName = telegramUser.firstName,
                                lastName = telegramUser.lastName
                            )
                        )

                    bot.sendMessage(
                        chatId = ChatId.fromId(chatId),
                        text = "\uD83C\uDF89 –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${telegramUser.firstName}!\n" +
                                "\n" +
                                "–Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç! \uD83C\uDFAC\n" +
                                "\n" +
                                "–Ø –∏—â—É —Ñ–∏–ª—å–º—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!\n" +
                                "\n" +
                                "\uD83D\uDCCB –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
                        replyMarkup = buildMainMenu()
                    )
                }

                callbackQuery {
                    val data = callbackQuery.data
                    val chatId = callbackQuery.message?.chat?.id ?: return@callbackQuery
                    val telegramUser = callbackQuery.from
                    val user = userRepository.findByTelegramId(telegramUser.id) ?: return@callbackQuery

                    when {
                        data.startsWith("add_fav:") -> {
                            val movieTitle = data.removePrefix("add_fav:")
                            favoriteMovieRepository.save(
                                FavoriteMovie(
                                    movieId = 0,
                                    title = movieTitle,
                                    user = user
                                )
                            )
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–§–∏–ª—å–º '$movieTitle' –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
                            )
                        }

                        data.startsWith("more:") -> {
                            val mood = data.removePrefix("more:")
                            val movieTitle = "–ï—â—ë –æ–¥–∏–Ω —Ñ–∏–ª—å–º –¥–ª—è '$mood'"
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–Ø –ø–æ–¥–æ–±—Ä–∞–ª —Ç–µ–±–µ: $movieTitle",
                                replyMarkup = buildInlineKeyboard(movieTitle, mood)
                            )
                        }

                        data.startsWith("toggle_genre:") -> {
                            val slug = data.removePrefix("toggle_genre:")
                            val genreName = when (slug) {
                                "komediya" -> "–ö–æ–º–µ–¥–∏—è"
                                "uzhasy" -> "–£–∂–∞—Å—ã"
                                "drama" -> "–î—Ä–∞–º–∞"
                                "fantastika" -> "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞"
                                "boevik" -> "–ë–æ–µ–≤–∏–∫"
                                "priklyucheniya" -> "–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è"
                                "semeynyy" -> "–°–µ–º–µ–π–Ω—ã–π"
                                "myuzikl" -> "–ú—é–∑–∏–∫–ª"
                                "melodrama" -> "–ú–µ–ª–æ–¥—Ä–∞–º–∞"
                                "thriller" -> "–¢—Ä–∏–ª–ª–µ—Ä"
                                "detektiv" -> "–î–µ—Ç–µ–∫—Ç–∏–≤"
                                "detskiy" -> "–î–µ—Ç—Å–∫–∏–π"
                                "fentezi" -> "–§—ç–Ω—Ç–µ–∑–∏"
                                "biografiya" -> "–ë–∏–æ–≥—Ä–∞—Ñ–∏—è"
                                "dokumentalnyy" -> "–î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π"
                                "sport" -> "–°–ø–æ—Ä—Ç"
                                "kriminal" -> "–ö—Ä–∏–º–∏–Ω–∞–ª"
                                "voennyy" -> "–í–æ–µ–Ω–Ω—ã–π"
                                "multfilm" -> "–ú—É–ª—å—Ç—Ñ–∏–ª—å–º"
                                "anime" -> "–ê–Ω–∏–º–µ"
                                else -> slug
                            }
                            val existing = user.favoriteGenres.find { it.genreSlug == slug }
                            if (existing != null) {
                                user.favoriteGenres.remove(existing)
                            } else {
                                user.favoriteGenres.add(
                                    FavoriteGenre(
                                        genreName = genreName,
                                        genreSlug = slug,
                                        user = user
                                    )
                                )
                            }

                            userRepository.save(user)

                            bot.editMessageReplyMarkup(
                                chatId = ChatId.fromId(chatId),
                                messageId = callbackQuery.message?.messageId,
                                replyMarkup = buildGenreKeyboard(user)
                            )
                        }

                        data == "genres_done" -> {
                            bot.editMessageText(
                                chatId = ChatId.fromId(chatId),
                                messageId = callbackQuery.message?.messageId,
                                text = "‚úÖ –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
                                replyMarkup = null
                            )
                        }
                    }
                }

                text {
                    val chatId = message.chat.id
                    val text = message.text ?: return@text
                    val telegramUser = message.from!!

                    if (text.startsWith("/")) return@text

                    userRepository.findByTelegramId(telegramUser.id)
                        ?: userRepository.save(
                            User(
                                telegramId = telegramUser.id,
                                username = telegramUser.username,
                                firstName = telegramUser.firstName,
                                lastName = telegramUser.lastName
                            )
                        )
                    when {
                        text == "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é" -> {
                            waitingForMovieName.add(chatId)
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ üé¨:"
                            )
                            return@text
                        }

                        chatId in waitingForMovieName -> {
                            waitingForMovieName.remove(chatId)

                            val query = text.trim()
                            val movies = kpService.getMoviesByName(query)

                            if (movies.isEmpty()) {
                                bot.sendMessage(
                                    chatId = ChatId.fromId(chatId),
                                    text = "üò¢ –§–∏–ª—å–º—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É \"$query\" –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."
                                )
                                return@text
                            }

                            val moviesToShow = movies.take(3)
                            val messageText = moviesToShow.joinToString("\n\n") { movie ->
                                val title = movie?.name ?: movie?.alternativeName ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                                val year = movie?.year?.toString() ?: "‚Äî"
                                val genres = movie?.genres?.joinToString(", ") { it.name } ?: "‚Äî"
                                val description = listOf(movie?.description, movie?.shortDescription)
                                    .firstOrNull { !it.isNullOrBlank() } ?: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                                "üé¨ *$title* ($year)\nüé≠ –ñ–∞–Ω—Ä—ã: $genres\n$description"
                            }

                            val buttons = moviesToShow.map { movie ->
                                val title = listOf(movie?.name, movie?.alternativeName)
                                    .firstOrNull { !it.isNullOrBlank() } ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
                                val year = movie?.year?.toString() ?: "‚Äî"
                                InlineKeyboardButton.CallbackData(
                                    text = "‚ù§Ô∏è $title $year",
                                    callbackData = "add_fav:$title"
                                )
                            }.chunked(2)

                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = messageText,
                                parseMode = ParseMode.MARKDOWN,
                                replyMarkup = InlineKeyboardMarkup.create(*buttons.toTypedArray())
                            )
                            return@text
                        }
                        text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π" -> {
                            val user = userRepository.findByTelegramId(telegramUser.id)
                                ?: userRepository.save(
                                    User(
                                        telegramId = telegramUser.id,
                                        username = telegramUser.username,
                                        firstName = telegramUser.firstName,
                                        lastName = telegramUser.lastName
                                    )
                                )

                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "–í—ã–±–µ—Ä–∏ –ª—é–±–∏–º—ã–µ –∂–∞–Ω—Ä—ã üé¨\n(–Ω–∞–∂–∏–º–∞–π –ø–æ–≤—Ç–æ—Ä–Ω–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞):",
                                replyMarkup = buildGenreKeyboard(user)
                            )
                        }
                        text == "üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º" -> {
                            val movie = kpService.getRandomMovie()
                            if (movie != null) {
                                val posterUrl = movie.poster?.url ?: ""
                                val genresText = movie.genres?.joinToString(", ") { it.name } ?: "‚Äî"
                                val yearText = movie.year?.toString() ?: "‚Äî"
                                val title = listOf(movie.name, movie.alternativeName)
                                    .firstOrNull { !it.isNullOrBlank() } ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

                                bot.sendPhoto(
                                    chatId = ChatId.fromId(chatId),
                                    photo = TelegramFile.ByUrl(posterUrl),
                                    caption = """
                                    üé¨ "$title" (${yearText})
                                    ‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: ${movie.rating?.kp ?: "‚Äî"}
                                    ‚≠ê IMDb: ${movie.rating?.imdb ?: "‚Äî"}
                                    üé≠ –ñ–∞–Ω—Ä—ã: $genresText
                                         
                                    ${movie.description ?: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç"}
                                     """.trimIndent(),
                                    replyMarkup = InlineKeyboardMarkup.create(
                                        listOf(
                                            listOf(
                                                InlineKeyboardButton.CallbackData(
                                                    text = "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                                                    callbackData = "add_fav:${movie.name}"
                                                ),
                                                InlineKeyboardButton.CallbackData(
                                                    text = "–°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º",
                                                    callbackData = "random_movie"
                                                )
                                            )
                                        )
                                    )
                                )
                            } else {
                                bot.sendMessage(
                                    chatId = ChatId.fromId(chatId),
                                    text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞."
                                )
                            }
                            return@text
                        }
                        text == "‚ùì –ü–æ–º–æ—â—å" -> {
                            val helpMessage = """
                            üé¨ *MovieMate Bot* ‚Äî –ø–æ–¥–±–æ—Ä —Ñ–∏–ª—å–º–æ–≤ –∏ —Å–µ—Ä–∏–∞–ª–æ–≤
                              ‚ú® *–û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:*
                              ‚Ä¢ üé≠ –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏–ª–∏ –∂–∞–Ω—Ä—É
                              ‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
                              ‚Ä¢ üîç –ü–æ–∏—Å–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
                              ‚Ä¢ ‚ù§Ô∏è –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ª—é–±–∏–º—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                              ‚Ä¢ üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º –Ω–∞ –≤–µ—á–µ—Ä
                              
                              üåê *–ò—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ API:*
                             üéûÔ∏è –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Kinopoisk API, 
                             —Ç–∞–∫–∂–µ –≤ —Ä–∞–±–æ—Ç–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å TMDb API
                            """.trimIndent()

                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = helpMessage,
                                parseMode = ParseMode.MARKDOWN_V2
                            )
                            return@text
                        }
                        else -> {
                            bot.sendMessage(
                                chatId = ChatId.fromId(chatId),
                                text = "\uD83C\uDFAC –Ø - —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–∏–Ω–æ–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç! \uD83C\uDFAC\n" +
                                        "\n" +
                                        "–Ø –∏—â—É —Ñ–∏–ª—å–º—ã –∏–∑ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –∏–º–µ–Ω–Ω–æ —Ç–æ, —á—Ç–æ —Ç–µ–±–µ –ø–æ–Ω—Ä–∞–≤–∏—Ç—Å—è!\n" +
                                        "\n" +
                                        "\uD83D\uDCCB –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:",
                                replyMarkup = buildMainMenu()
                            )
                        }
                    }
                }
            }
        }

        bot.startPolling()
    }
}