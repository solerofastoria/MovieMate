package org.example.bot

import com.github.kotlintelegrambot.entities.InlineKeyboardMarkup
import com.github.kotlintelegrambot.entities.KeyboardReplyMarkup
import com.github.kotlintelegrambot.entities.keyboard.InlineKeyboardButton
import com.github.kotlintelegrambot.entities.keyboard.KeyboardButton
import org.example.api.dto.KpMovie
import org.example.entity.User

fun buildGenreKeyboard(user: User): InlineKeyboardMarkup {
    val genres = listOf(
        "–∫–æ–º–µ–¥–∏—è" to "üé≠ –ö–æ–º–µ–¥–∏—è",
        "—É–∂–∞—Å—ã" to "üò± –£–∂–∞—Å—ã",
        "–¥—Ä–∞–º–∞" to "üíî –î—Ä–∞–º–∞",
        "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞" to "üöÄ –§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞",
        "–±–æ–µ–≤–∏–∫" to "üî´ –ë–æ–µ–≤–∏–∫",
        "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è" to "üèûÔ∏è –ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è",
        "—Å–µ–º–µ–π–Ω—ã–π" to "üë™ –°–µ–º–µ–π–Ω—ã–π",
        "–º—é–∑–∏–∫–ª" to "üéµ –ú—é–∑–∏–∫–ª",
        "–º–µ–ª–æ–¥—Ä–∞–º–∞" to "üíò –ú–µ–ª–æ–¥—Ä–∞–º–∞",
        "—Ç—Ä–∏–ª–ª–µ—Ä" to "üß† –¢—Ä–∏–ª–ª–µ—Ä",
        "–¥–µ—Ç–µ–∫—Ç–∏–≤" to "üïµÔ∏è –î–µ—Ç–µ–∫—Ç–∏–≤",
        "–¥–µ—Ç—Å–∫–∏–π" to "üß∏ –î–µ—Ç—Å–∫–∏–π",
        "—Ñ—ç–Ω—Ç–µ–∑–∏" to "‚öîÔ∏è –§—ç–Ω—Ç–µ–∑–∏",
        "–±–∏–æ–≥—Ä–∞—Ñ–∏—è" to "üìñ –ë–∏–æ–≥—Ä–∞—Ñ–∏—è",
        "–¥–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π" to "üéì –î–æ–∫—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π",
        "—Å–ø–æ—Ä—Ç" to "üé§ –°–ø–æ—Ä—Ç",
        "–∫—Ä–∏–º–∏–Ω–∞–ª" to "üéØ –ö—Ä–∏–º–∏–Ω–∞–ª",
        "–≤–æ–µ–Ω–Ω—ã–π" to "üí£ –í–æ–µ–Ω–Ω—ã–π",
        "–º—É–ª—å—Ç—Ñ–∏–ª—å–º" to "üåç –ú—É–ª—å—Ç—Ñ–∏–ª—å–º",
        "–∞–Ω–∏–º–µ " to "üßí –ê–Ω–∏–º–µ"
    )

    val rows = genres.chunked(3).map { chunk ->
        chunk.map { (slug, emojiName) ->
            val selected = user.favoriteGenres.any { it.genreSlug == slug }
            InlineKeyboardButton.CallbackData(
                text = if (selected) "‚úÖ $emojiName" else emojiName,
                callbackData = "toggle_genre:$slug"
            )
        }
    }.toMutableList()

    rows.add(
        listOf(
            InlineKeyboardButton.CallbackData("‚úÖ –ì–æ—Ç–æ–≤–æ", "genres_done")
        )
    )

    return InlineKeyboardMarkup.create(*rows.toTypedArray())
}

fun buildMainMenu(): KeyboardReplyMarkup {
    return KeyboardReplyMarkup(
        keyboard = listOf(
            listOf(
                KeyboardButton("üé¨ –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é"),
                KeyboardButton("üé® –ü–æ–¥–±–æ—Ä–∫–∞ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è–º")
            ),
            listOf(
                KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π"),
                KeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            ),
            listOf(
                KeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
                KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
            ),
            listOf(
                KeyboardButton("üé≤ –°–ª—É—á–∞–π–Ω—ã–π —Ñ–∏–ª—å–º")
            )
        ),
        resizeKeyboard = true,
        oneTimeKeyboard = false
    )
}

fun buildInlineKeyboard(movieTitle: String, mood: String): InlineKeyboardMarkup {
    return InlineKeyboardMarkup.create(
        listOf(
            listOf(
                InlineKeyboardButton.CallbackData(
                    text = "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ",
                    callbackData = "add_fav:$movieTitle"
                ),
                InlineKeyboardButton.CallbackData(
                    text = "–°–º–æ—Ç—Ä–µ—Ç—å –µ—â—ë",
                    callbackData = "more:$mood"
                )
            )
        )
    )
}

fun createTitle(movie: KpMovie?): String {
    val genres = movie?.genres?.joinToString(", ") { it.name } ?: "‚Äî"
    val description = listOf(movie?.description, movie?.shortDescription)
        .firstOrNull { !it.isNullOrBlank() } ?: "–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
    val year = movie?.year?.toString() ?: "‚Äî"
    val name = listOf(movie?.name, movie?.alternativeName)
        .firstOrNull { !it.isNullOrBlank() } ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
    return "üé¨ *$name* ($year)\nüé≠ –ñ–∞–Ω—Ä—ã: $genres\n‚≠ê –ö–∏–Ω–æ–ø–æ–∏—Å–∫: ${movie?.rating?.kp ?: "‚Äî"}\n$description"
}

fun createFavKeyboard(movies: List<KpMovie?>): InlineKeyboardMarkup {
    val buttons = movies.map { movie ->
        val title = listOf(movie?.name, movie?.alternativeName)
            .firstOrNull { !it.isNullOrBlank() } ?: "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        InlineKeyboardButton.CallbackData(
            text = "‚ù§Ô∏è $title",
            callbackData = "add_fav:$title"
        )
    }.chunked(2)

    return InlineKeyboardMarkup.create(
        buttons.map { row -> row.toList() }
    )
}